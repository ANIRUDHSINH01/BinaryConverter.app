# .github/workflows/auto-build-indus.yml
name: Auto Build APK for Indus

on:
  push:
    branches:
      - main
    tags:
      - 'v*' # Triggers on version tags like v1.0.0
  workflow_dispatch: # Allows manual triggering

permissions:
  contents: write # Needed to create releases

jobs:
  build_and_release:
    name: Build APK and Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Setup Expo CLI and Authenticate
        run: |
          echo "Installing EAS CLI..."
          npm install -g eas-cli
          echo "Authenticating with Expo..."
          echo "${{ secrets.EXPO_TOKEN }}" | eas login --non-interactive
          echo "Verifying login..."
          eas whoami

      - name: Create Build Output Directory
        run: mkdir -p ${{ runner.temp }}/apk-output

      - name: Build Android APK with EAS
        id: eas_build
        run: |
          echo "Starting EAS build for Android APK (production profile)..."
          BUILD_OUTPUT=$(eas build --platform android --profile production --non-interactive --output-dir ${{ runner.temp }}/apk-output 2>&1)
          echo "$BUILD_OUTPUT"

          # --- Extract Build URL ---
          BUILD_URL=$(echo "$BUILD_OUTPUT" | grep -Eo 'https://expo\.dev/accounts/[^ ]*' | head -n 1)
          if [[ -n "$BUILD_URL" ]]; then
            echo "build_url=$BUILD_URL" >> $GITHUB_OUTPUT
          else
            echo "build_url=NOT_FOUND" >> $GITHUB_OUTPUT
          fi

      - name: Check for APK Artifact
        id: check_apk
        run: |
          APK_PATH=$(find ${{ runner.temp }}/apk-output -name "*.apk" | head -n 1)
          if [[ -z "$APK_PATH" ]]; then
            echo "::error::No APK file found in the build output directory!"
            ls -la ${{ runner.temp }}/apk-output
            exit 1
          fi
          echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
          echo "Found APK: $APK_PATH"

      - name: Determine Release Tag
        id: get_tag
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            TAG=${GITHUB_REF#refs/tags/}
          else
            TAG="build-$(date +'%Y%m%d-%H%M%S')-${GITHUB_SHA::7}"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          release_name: Release ${{ steps.get_tag.outputs.tag }} (Indus APK)
          body: |
            ## Binary Converter App APK for Indus Appstore

            This release contains the Android APK built for submission to the Indus Appstore.

            ### Download
            The APK file (`$(basename ${{ steps.check_apk.outputs.apk_path }})`) is attached to this release.

            ### Build Details
            - **Build Trigger:** ${{ github.event_name }}
            - **Commit:** ${{ github.sha }}
            - **Expo Build URL (Monitor Progress):** ${{ steps.eas_build.outputs.build_url }}

            ### Next Steps for Indus Submission
            1. Download the APK asset from this release.
            2. Log in to the [Indus Appstore Developer Console](https://indusappstore.com/developer).
            3. Navigate to the app submission section.
            4. Upload the downloaded APK file.
            5. Fill in the app details:
                - Package Name: `com.anirudhsinh.binaryconverter` (from app.json)
                - Version: Check app.json/eas.json or the APK itself
                - App Name: Binary Converter
                - Description: (from app.json)
                - Category: Tools/Productivity
                - Privacy Policy URL: `https://anirudhsinh01.github.io/BinaryConverter/`
                - Upload required screenshots.
            6. Submit for review.

          draft: false
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/v') }}

      - name: Upload APK to Release
        run: |
          echo "Uploading APK: ${{ steps.check_apk.outputs.apk_path }} to release ${{ steps.get_tag.outputs.tag }}"
          gh release upload ${{ steps.get_tag.outputs.tag }} "${{ steps.check_apk.outputs.apk_path }}" --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Finalize Workflow
        if: success()
        run: |
          echo "===== WORKFLOW COMPLETED SUCCESSFULLY ====="
          echo "Release Tag: ${{ steps.get_tag.outputs.tag }}"
          echo "APK Uploaded: $(basename ${{ steps.check_apk.outputs.apk_path }})"
          echo "Expo Build URL: ${{ steps.eas_build.outputs.build_url }}"
          echo "=========================================="
          echo "Next Step: Go to the release page and download the APK for Indus submission."
          
